name: CI/CD for Microservices

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      PORT: ${{ secrets.PORT }}
      PORT2: ${{ secrets.PORT2 }} # port2 is for inventory service
      MONGO_URL: ${{ secrets.MONGO_URL }}
      DEV_MODE: ${{ secrets.DEV_MODE }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      EMAIL_USER: ${{ secrets.EMAIL_USER }}
      EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
      FRONTEND_URL: ${{ secrets.FRONTEND_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # ---------- Security Scans ----------
      - name: Snyk scan for user-service
        run: |
          npm install -g snyk
          cd user-service
          snyk test --severity-threshold=high || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Snyk scan for inventory-service
        run: |
          npm install -g snyk
          cd inventory-service
          snyk test --severity-threshold=high || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: SonarCloud scan for user-service
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: user-service
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: IT21228612_CTSE_Assignmant_Y4S2_Microservices
          SONAR_ORGANIZATION: jeewantha-de-silva

      - name: SonarCloud scan for inventory-service
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: inventory-service
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: IT21228612_CTSE_Assignmant_Y4S2_Microservices
          SONAR_ORGANIZATION: jeewantha-de-silva

      # ---------- Docker/ECR ----------
      - name: Authenticate to AWS ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin 730615659624.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build & Push user-service image
        run: |
          docker build \
            --build-arg PORT=$PORT \
            --build-arg MONGO_URL=$MONGO_URL \
            --build-arg DEV_MODE=$DEV_MODE \
            --build-arg JWT_SECRET=$JWT_SECRET \
            --build-arg EMAIL_USER=$EMAIL_USER \
            --build-arg EMAIL_PASS="${EMAIL_PASS}" \
            --build-arg FRONTEND_URL=$FRONTEND_URL \
            -t 730615659624.dkr.ecr.$AWS_REGION.amazonaws.com/ctse/user-service:latest ./user-service
          docker push 730615659624.dkr.ecr.$AWS_REGION.amazonaws.com/ctse/user-service:latest

      - name: Build & Push inventory-service image
        run: |
          docker build \
            --build-arg PORT=$PORT2 \
            --build-arg MONGO_URL=$MONGO_URL \
            --build-arg DEV_MODE=$DEV_MODE \
            -t 730615659624.dkr.ecr.$AWS_REGION.amazonaws.com/ctse/inventory-service:latest ./inventory-service
          docker push 730615659624.dkr.ecr.$AWS_REGION.amazonaws.com/ctse/inventory-service:latest

      # ---------- Force ECS Redeploy ----------
      - name: Force ECS redeployment for user-service
        run: |
          aws ecs update-service \
            --cluster CTSE_cluster2 \
            --service userService2 \
            --force-new-deployment

      - name: Force ECS redeployment for inventory-service
        run: |
          aws ecs update-service \
            --cluster CTSE_cluster2 \
            --service inventoryService2 \
            --force-new-deployment

            
      # ---------- Wait for ECS services to stabilize ----------
        
      - name: Wait for ECS service to stabilize
        run: |
          wait_for_stable() {
            SERVICE=$1
            CLUSTER=CTSE_cluster2

            echo "Waiting for $SERVICE to stabilize..."
            aws ecs wait services-stable \
              --cluster $CLUSTER \
              --services $SERVICE
            echo "$SERVICE is now stable."
          }

          wait_for_stable userService2
          wait_for_stable inventoryService2


      # ---------- Fetch new public IPs ----------
      - name: Fetch public IPs of ECS tasks
        id: get-ecs-ips
        run: |
          get_public_ip() {
            SERVICE=$1
            CLUSTER=CTSE_cluster2

            # 1) grab the first running task ARN
            TASK_ARN=$(aws ecs list-tasks \
              --cluster $CLUSTER \
              --service-name $SERVICE \
              --query 'taskArns[0]' \
              --output text)

            # 2) find its ENI
            ENI_ID=$(aws ecs describe-tasks \
              --cluster $CLUSTER \
              --tasks $TASK_ARN \
              --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' \
              --output text)

            # 3) lookup the public IP on that ENI
            PUBLIC_IP=$(aws ec2 describe-network-interfaces \
              --network-interface-ids $ENI_ID \
              --query 'NetworkInterfaces[0].Association.PublicIp' \
              --output text)

            echo "$SERVICE IP: $PUBLIC_IP"
            echo "::set-output name=${SERVICE}_ip::$PUBLIC_IP"
          }

          get_public_ip userService2
          get_public_ip inventoryService2

      # ---------- Inject these IPs into your React .env ----------
      - name: Inject ECS IPs into frontend .env
        run: |
          cd frontend
          cat <<EOF > .env.production
          REACT_APP_USER_API_URL=http://${{ steps.get-ecs-ips.outputs.userService2_ip }}:5000/api
          REACT_APP_INV_API_URL=http://${{ steps.get-ecs-ips.outputs.inventoryService2_ip }}:5001/api
          EOF

      # ---------- (Optional) Update Netlify Dashboard ----------
      # ─── Install Netlify CLI ────────────────────────────────────────────
      - name: Install Netlify CLI
        run: npm install -g netlify-cli

      # ─── Link the current directory to your Netlify site ───────────────
      - name: Link Netlify site
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        run: |
          # --id is the correct flag for the 'link' command
          netlify link --id ${{ secrets.NETLIFY_SITE_ID }}

      # ─── Now set your env vars (no --site or --site-id) ────────────────
      - name: Update Netlify environment variables
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        run: |
          # target production context explicitly if you like:
          netlify env:set REACT_APP_USER_API_URL http://${{ steps.get-ecs-ips.outputs.userService2_ip }}:5000/api 
          netlify env:set REACT_APP_INV_API_URL  http://${{ steps.get-ecs-ips.outputs.inventoryService2_ip }}:5001/api  

      # ---------- Build & Deploy Frontend ----------
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: ./frontend/build
          production-deploy: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
